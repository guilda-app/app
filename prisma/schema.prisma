// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  profile   Profile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  name      String
  imageUri  String

  servers   Server[]
  members   Member[]
  channels  Channel[]

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  status           String   @default("offline") // online, offline, idle, dnd
  statusMessage    String?

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  connectedSockets Int @default(0)
  badges           String   @default("") // comma separated list of badges

  @@index([userId])
}

model Invite {
  id        String   @id @default(uuid())
  code      String   @unique
  serverId  String
  server    Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)

  deleteAt  DateTime? // if null, invite lasts forever
  createdAt DateTime @default(now())

  @@index([serverId])
}

model Server {
  id        String   @id @default(uuid())
  imageUri  String   

  invites   Invite[]
  
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members   Member[]
  channels  Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  description String?

  @@index([profileId], name: "profileId")
}

model Member {
  id        String           @id @default(uuid())
  role      Int              @default(0) // 0: member, 1: moderator, 2: admin, 3: owner

  profileId String
  profile   Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId  String
  server    Server           @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages  Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Channel {
  id        String   @id @default(uuid())
  name      String

  serverId  String
  server    Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)

  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  messages  Message[]
  type      Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([serverId])
  @@index([profileId])
}

model verificationCode {
  id          String   @id @default(uuid()) @unique
  email       String
  createdAt   DateTime @default(now())
  forCreation Boolean  @default(true)
}

model Message {
  id String @id @default(uuid())
  content String 

  fileUrl String?
  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  embeds MessageEmbed[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([channelId])
}

model MessageEmbed {
  id String @id @default(uuid())
  title String
  description String?
  url String
  color String?
  image String?

  message Message @relation(fields: [id], references: [id], onDelete: Cascade)
}
